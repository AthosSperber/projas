// =============================================================
// ARQUIVO: static/js/index.js
// -------------------------------------------------------------
// Respons치vel por controlar o formul치rio de envio de reclama칞칫es
// na p치gina inicial (index.html).
// Faz a valida칞칚o, envia os dados para o Flask e mostra alertas
// de sucesso ou erro usando a fun칞칚o App.showToast().
// =============================================================

// Aguarda o carregamento completo da p치gina
App.onReady(function () {

  // Refer칡ncia ao formul치rio HTML
  const form = document.getElementById('meuForm');

  // Caso o formul치rio n칚o exista (ex: em outra p치gina), sai da fun칞칚o
  if (!form) return;

  /**
   * Escuta o evento de envio do formul치rio.
   * Quando o usu치rio clica em "Enviar Reclama칞칚o", o script:
   * 1. Interrompe o envio padr칚o do navegador
   * 2. Envia os dados via Fetch para o Flask
   * 3. Mostra um alerta de sucesso ou erro
   * 4. Limpa o formul치rio
   */
  form.addEventListener('submit', async function (e) {
    e.preventDefault(); // Evita recarregar a p치gina

    // Cria um objeto FormData com todos os campos do formul치rio
    const formData = new FormData(form);

    try {
      // Envia os dados para o backend (rota Flask /submit)
      const res = await fetch('/submit', {
        method: 'POST',
        body: formData
      });

      // Se o envio n칚o for bem-sucedido, exibe uma mensagem de erro
      if (!res.ok) {
        const txt = await res.text();
        App.showToast('Erro ao enviar reclama칞칚o: ' + txt, 'danger');
        return;
      }

      // Exibe mensagem de sucesso
      App.showToast('Reclama칞칚o enviada com sucesso! 游꿀', 'success');

      // Limpa todos os campos do formul치rio
      form.reset();
    } catch (err) {
      // Caso ocorra um erro inesperado (ex: sem internet, servidor offline)
      console.error(err);
      App.showToast('Falha de conex칚o ao enviar reclama칞칚o', 'danger');
    }
  });
});
